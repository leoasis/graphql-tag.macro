// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`macros 1. macros: 1. macros 1`] = `
"
import gql from './index.macro'

const query = gql\`
  query Foo {
    foo {
      bar
      baz
    }
  }
\`;

      ↓ ↓ ↓ ↓ ↓ ↓

const query = {
  'kind': 'Document',
  'definitions': [{
    'kind': 'OperationDefinition',
    'operation': 'query',
    'name': {
      'kind': 'Name',
      'value': 'Foo'
    },
    'variableDefinitions': [],
    'directives': [],
    'selectionSet': {
      'kind': 'SelectionSet',
      'selections': [{
        'kind': 'Field',
        'name': {
          'kind': 'Name',
          'value': 'foo'
        },
        'arguments': [],
        'directives': [],
        'selectionSet': {
          'kind': 'SelectionSet',
          'selections': [{
            'kind': 'Field',
            'name': {
              'kind': 'Name',
              'value': 'bar'
            },
            'arguments': [],
            'directives': []
          }, {
            'kind': 'Field',
            'name': {
              'kind': 'Name',
              'value': 'baz'
            },
            'arguments': [],
            'directives': []
          }]
        }
      }]
    }
  }],
  'loc': {
    'start': 0,
    'end': 55,
    'source': {
      'body': '\\\\n  query Foo {\\\\n    foo {\\\\n      bar\\\\n      baz\\\\n    }\\\\n  }\\\\n',
      'name': 'GraphQL request',
      'locationOffset': {
        'line': 1,
        'column': 1
      }
    }
  }
};
"
`;

exports[`macros 2. macros: 2. macros 1`] = `
"
import gql from './index.macro'

const frag = gql\`
  fragment ChiFrag on Chi {
    var
    char
  }
\`;

const frag2 = gql\`
  fragment FooFrag on Foo {
    qux
    chi {
      ...ChiFrag
    }
  }
  \${frag}
\`;

const query = gql\`
  query Foo {
    foo {
      bar
      baz
      ...FooFrag
    }
  }
  \${frag2}
\`;

      ↓ ↓ ↓ ↓ ↓ ↓

const frag = {
  'kind': 'Document',
  'definitions': [{
    'kind': 'FragmentDefinition',
    'name': {
      'kind': 'Name',
      'value': 'ChiFrag'
    },
    'typeCondition': {
      'kind': 'NamedType',
      'name': {
        'kind': 'Name',
        'value': 'Chi'
      }
    },
    'directives': [],
    'selectionSet': {
      'kind': 'SelectionSet',
      'selections': [{
        'kind': 'Field',
        'name': {
          'kind': 'Name',
          'value': 'var'
        },
        'arguments': [],
        'directives': []
      }, {
        'kind': 'Field',
        'name': {
          'kind': 'Name',
          'value': 'char'
        },
        'arguments': [],
        'directives': []
      }]
    }
  }],
  'loc': {
    'start': 0,
    'end': 50,
    'source': {
      'body': '\\\\n  fragment ChiFrag on Chi {\\\\n    var\\\\n    char\\\\n  }\\\\n',
      'name': 'GraphQL request',
      'locationOffset': {
        'line': 1,
        'column': 1
      }
    }
  }
};

const frag2 = {
  'kind': 'Document',
  'definitions': [{
    'kind': 'FragmentDefinition',
    'name': {
      'kind': 'Name',
      'value': 'FooFrag'
    },
    'typeCondition': {
      'kind': 'NamedType',
      'name': {
        'kind': 'Name',
        'value': 'Foo'
      }
    },
    'directives': [],
    'selectionSet': {
      'kind': 'SelectionSet',
      'selections': [{
        'kind': 'Field',
        'name': {
          'kind': 'Name',
          'value': 'qux'
        },
        'arguments': [],
        'directives': []
      }, {
        'kind': 'Field',
        'name': {
          'kind': 'Name',
          'value': 'chi'
        },
        'arguments': [],
        'directives': [],
        'selectionSet': {
          'kind': 'SelectionSet',
          'selections': [{
            'kind': 'FragmentSpread',
            'name': {
              'kind': 'Name',
              'value': 'ChiFrag'
            },
            'directives': []
          }]
        }
      }]
    }
  }].concat(frag.definitions),
  'loc': {
    'start': 0,
    'end': 77,
    'source': {
      'body': '\\\\n  fragment FooFrag on Foo {\\\\n    qux\\\\n    chi {\\\\n      ...ChiFrag\\\\n    }\\\\n  }\\\\n  \\\\n',
      'name': 'GraphQL request',
      'locationOffset': {
        'line': 1,
        'column': 1
      }
    }
  }
};

const query = {
  'kind': 'Document',
  'definitions': [{
    'kind': 'OperationDefinition',
    'operation': 'query',
    'name': {
      'kind': 'Name',
      'value': 'Foo'
    },
    'variableDefinitions': [],
    'directives': [],
    'selectionSet': {
      'kind': 'SelectionSet',
      'selections': [{
        'kind': 'Field',
        'name': {
          'kind': 'Name',
          'value': 'foo'
        },
        'arguments': [],
        'directives': [],
        'selectionSet': {
          'kind': 'SelectionSet',
          'selections': [{
            'kind': 'Field',
            'name': {
              'kind': 'Name',
              'value': 'bar'
            },
            'arguments': [],
            'directives': []
          }, {
            'kind': 'Field',
            'name': {
              'kind': 'Name',
              'value': 'baz'
            },
            'arguments': [],
            'directives': []
          }, {
            'kind': 'FragmentSpread',
            'name': {
              'kind': 'Name',
              'value': 'FooFrag'
            },
            'directives': []
          }]
        }
      }]
    }
  }].concat(frag2.definitions),
  'loc': {
    'start': 0,
    'end': 75,
    'source': {
      'body': '\\\\n  query Foo {\\\\n    foo {\\\\n      bar\\\\n      baz\\\\n      ...FooFrag\\\\n    }\\\\n  }\\\\n  \\\\n',
      'name': 'GraphQL request',
      'locationOffset': {
        'line': 1,
        'column': 1
      }
    }
  }
};
"
`;
